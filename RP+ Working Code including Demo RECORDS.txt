#part 1

import shap
import numpy as np
import xgboost as xgb
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import sqlite3
from datetime import datetime
from lifelines import KaplanMeierFitter, CoxPHFitter
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import roc_auc_score
import logging
from contextlib import contextmanager
import os
import plotly.express as px

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration
DB_PATH = "resume_data.db"
TABLE_NAME = "resume_data"

def create_database():
    """Create database and table if they don't exist"""
    conn = None
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                
                -- üë§ Demographic & Socioeconomic
                Age INTEGER,
                Sex TEXT,
                Employment_Status TEXT,
                Income_Level TEXT,
                Social_Deprivation INTEGER,
                Material_Deprivation INTEGER,
                
                -- üë©‚Äç‚öïÔ∏è Occupation Details
                Healthcare_Role TEXT,
                Department TEXT,
                Years_Experience INTEGER,
                Weekly_Hours INTEGER,
                Night_Shifts_Monthly INTEGER,
                Overtime_Hours_Monthly INTEGER,
                Patient_Facing TEXT,
                Management_Responsibilities TEXT,
                Work_Stress_Level INTEGER,
                Job_Satisfaction INTEGER,
                Workplace_Support INTEGER,
                Burnout_Level INTEGER,
                Sick_Days_Last_Year INTEGER,
                Workplace_Incidents INTEGER,
                Recent_Promotion TEXT,
                Recent_Demotion TEXT,
                
                -- üè• Clinical & Psychiatric
                MH_Disorders TEXT,
                Substance_Use_Disorders TEXT,
                History_Suicidal_Ideation INTEGER,
                Previous_Suicide_Attempts INTEGER,
                Frequency_Suicidal_Thoughts INTEGER,
                Intensity_Suicidal_Thoughts INTEGER,
                
                -- üèÉ Health & Medical
                Chronic_Illnesses TEXT,
                GP_Visits INTEGER,
                ED_Visits INTEGER,
                Hospitalizations INTEGER,
                
                -- üß† Psychological Factors
                Hopelessness INTEGER,
                Despair INTEGER,
                Impulsivity INTEGER,
                Aggression INTEGER,
                Access_Lethal_Means INTEGER,
                Social_Isolation INTEGER,
                
                -- ü§ù Support & Resilience
                Coping_Strategies INTEGER,
                Measured_Resilience INTEGER,
                MH_Service_Engagement INTEGER,
                Supportive_Relationships INTEGER,
                
                -- üìä Risk Assessment
                Suicidal_Distress INTEGER,
                Time_To_Crisis INTEGER,
                Crisis_Event INTEGER,
                Observation_Date TEXT
            )
        """)
        conn.commit()
        st.success("Database initialized successfully!")
        
    except sqlite3.Error as e:
        st.error(f"Database creation error: {e}")
        logger.error(f"Database creation error: {e}")
    finally:
        if conn:
            conn.close()

@contextmanager
def get_db_connection():
    conn = None
    try:
        conn = sqlite3.connect(DB_PATH)
        yield conn
    finally:
        if conn:
            conn.close()

@st.cache_data(ttl=3600)
def load_data():
    try:
        with get_db_connection() as conn:
            query = f"SELECT * FROM {TABLE_NAME}"
            df = pd.read_sql_query(query, conn)
            if 'Observation_Date' in df.columns:
                df['Observation_Date'] = pd.to_datetime(df['Observation_Date'])
            return df
    except Exception as e:
        logger.error(f"Data loading error: {e}")
        return pd.DataFrame()

def insert_entry(data: dict):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            columns = ', '.join(data.keys())
            placeholders = ', '.join(['?' for _ in data])
            query = f"INSERT INTO {TABLE_NAME} ({columns}) VALUES ({placeholders})"
            cursor.execute(query, list(data.values()))
            conn.commit()
            return True
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        st.error(f"‚ö†Ô∏è Failed to save data: {e}")
        return False

def upload_csv_to_db(csv_df: pd.DataFrame):
    try:
        with get_db_connection() as conn:
            csv_df.to_sql(TABLE_NAME, conn, if_exists='append', index=False)
            return True
    except Exception as e:
        logger.error(f"CSV upload error: {e}")
        st.error(f"‚ö†Ô∏è Failed to upload CSV: {e}")
        return False

def get_latest_entries(n=10):
    try:
        with get_db_connection() as conn:
            df = pd.read_sql_query(
                f"SELECT * FROM {TABLE_NAME} ORDER BY id DESC LIMIT {n}",
                conn
            )
            return df
    except Exception as e:
        logger.error(f"Error fetching latest entries: {e}")
        return pd.DataFrame()


#part 2 

def main():
    st.set_page_config(
        page_title="RESUME Predictor",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # Create database if it doesn't exist
    if not os.path.exists(DB_PATH):
        create_database()
    
    # Load data
    df = load_data()
    
    # Sidebar
    st.sidebar.header("üß≠ Main Menu")
    edit_mode = st.sidebar.checkbox("Enable Edit Mode", value=False)
    analysis_choice = st.sidebar.radio(
        "Choose Analysis Model:",
        ["Kaplan‚ÄìMeier Estimator", 
         "Cox Proportional Hazards Model",
         "Bayesian Spatio-Temporal Model", 
         "Machine Learning (XGBoost)"]
    )

    # Create tabs
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üü† Dashboard",
        "üü¢ What is RESUME",
        "üîµ Database (Front)",
        "üü£ Detailed Analytics",
        "üî∑ Data Entry",
        "‚öôÔ∏è Database (Backend)"
    ])

    # Dashboard Tab
    with tab1:
        st.title("üß† RESUME Predictive Modelling Dashboard")
        
        # Introduction and Explanation
        st.markdown("""
        ### üìã What am I looking at?
        This dashboard provides a comprehensive overview of suicide risk factors and patterns among healthcare workers. 
        The data shown here helps identify trends, risk factors, and potential intervention points.

        ### üéØ Key Points:
        - All data is anonymized and aggregated
        - Risk scores range from 0 (lowest) to 10 (highest)
        - Temporal patterns show how risks change over time
        - Employment status may influence risk factors
        """)
        
        # Database Overview Section
        st.header("üìä Database Overview")
        if not df.empty:
            # Overview metrics with explanations
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total Records", len(df))
                st.markdown("*Total number of healthcare workers in database*")
            
            with col2:
                crisis_events = int(df['Crisis_Event'].sum())
                st.metric("Recorded Crisis Events", crisis_events)
                st.markdown("*Number of documented crisis incidents*")
            
            with col3:
                age_range = f"{int(df['Age'].min())} - {int(df['Age'].max())}"
                st.metric("Age Range", age_range)
                st.markdown("*Age span of healthcare workers*")
            
            with col4:
                employment_counts = df['Employment_Status'].value_counts()
                st.metric("Employment Types", len(employment_counts))
                st.markdown("*Different categories of employment*")

            # Employment Distribution
            st.subheader("üë• Employment Distribution")
            st.markdown("""
            This pie chart shows the breakdown of employment status among healthcare workers. 
            Different employment categories may have varying risk levels and support needs.
            """)
            emp_fig = px.pie(df, names='Employment_Status', 
                           title='Distribution by Employment Status')
            st.plotly_chart(emp_fig)

            # Risk Analysis Section
            st.header("üéØ Risk Analysis Overview")
            st.markdown("""
            ### Understanding the Risk Models:

            1. **Kaplan-Meier Analysis**
            - Shows survival probability over time
            - Helps identify critical periods for intervention
            - Lower curves indicate higher risk periods

            2. **Cox Proportional Hazards**
            - Examines multiple risk factors simultaneously
            - Identifies which factors most strongly predict crises
            - Helps target interventions effectively

            3. **Machine Learning Predictions**
            - Uses patterns in data to predict future risks
            - Combines multiple factors for accurate assessment
            - Helps identify high-risk individuals early
            """)

            # Model-specific visualizations
            if analysis_choice == "Kaplan‚ÄìMeier Estimator":
                st.subheader("üìä Kaplan-Meier Survival Analysis")
                
                kmf = KaplanMeierFitter()
                if 'Time_To_Crisis' in df.columns and 'Crisis_Event' in df.columns:
                    kmf.fit(df['Time_To_Crisis'], 
                           df['Crisis_Event'], 
                           label='Overall')
                    fig, ax = plt.subplots(figsize=(10, 6))
                    kmf.plot(ax=ax)
                    plt.title('Kaplan-Meier Survival Curve')
                    st.pyplot(fig)

            # Time Trends
            st.subheader("üìÖ Temporal Patterns")
            st.markdown("""
            The graphs below show how crisis events and risk factors change over time.
            This helps identify:
            - Seasonal patterns
            - High-risk periods
            - Impact of interventions
            - Long-term trends
            """)
            
            # Age Distribution with Context
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("üë• Age Distribution")
                st.markdown("""
                This histogram shows the age distribution of healthcare workers in the database.
                Understanding age patterns helps target age-specific interventions.
                """)
                age_fig = px.histogram(df, x='Age', nbins=20, 
                                     title='Age Distribution of Healthcare Workers')
                st.plotly_chart(age_fig)
            
            with col2:
                st.subheader("üìä Risk by Employment")
                st.markdown("""
                This chart shows average risk levels across different employment types.
                Higher bars indicate groups that may need additional support.
                """)
                risk_by_emp = df.groupby('Employment_Status')['Suicidal_Distress'].mean()
                risk_fig = px.bar(risk_by_emp, title='Average Risk Level by Employment Type')
                st.plotly_chart(risk_fig)

            # Summary Statistics
            st.subheader("üìä Key Findings")
            st.markdown(f"""
            ### Summary of Database:
            - **Total Population**: {len(df)} healthcare workers
            - **Crisis Events**: {crisis_events} recorded incidents
            - **Age Range**: {age_range} years
            - **Most Common Employment Type**: {df['Employment_Status'].mode()[0]}
            - **Average Risk Score**: {df['Suicidal_Distress'].mean():.2f}/10

            ### Key Observations:
            - {len(df[df['Crisis_Event'] == 1])} individuals experienced crisis events
            - {len(df[df['Social_Isolation'] > 7])} show high social isolation scores
            - {len(df[df['Hopelessness'] > 7])} indicate severe hopelessness
            """)


#part 3

    # What is RESUME Tab
    with tab2:
        st.title("üß† RESUME: Risk Evaluation and Suicide Understanding Monitoring Engine")
        
        # Overview Section
        st.header("üìã Project Overview")
        st.markdown("""
        RESUME is an advanced predictive analytics tool designed to identify and assess suicide risk among healthcare workers. 
        The project combines multiple analytical approaches to provide comprehensive risk assessment and monitoring.
        
        üîó **Project Website:** [RESUME Project Portal](https://www.resumeuk.org)
        
        ### üéØ Core Objectives
        1. Early Risk Detection
        2. Continuous Monitoring
        3. Predictive Analytics
        4. Evidence-Based Intervention Support
        
        ### ‚≠ê Key Features
        - üîÑ Real-time risk assessment
        - üìä Multi-modal data analysis
        - ‚è±Ô∏è Temporal pattern recognition
        - üìà Interactive visualization
        - üîí Secure data management
        """)

        # Technical Architecture
        st.header("üèóÔ∏è Technical Architecture")
        st.markdown("""
        ### üì• Data Collection
        - üìù Structured clinical assessments
        - üìä Psychometric measurements
        - ‚è±Ô∏è Temporal behavioral patterns
        - üåç Environmental factors
        
        ### üîÑ Analysis Pipeline
        1. üîç Data Preprocessing
        2. ‚öôÔ∏è Feature Engineering
        3. ‚öñÔ∏è Risk Assessment
        4. ü§ñ Predictive Modeling
        5. üìä Visualization
        """)

        st.header("üîÆ Predictive Models")
        st.markdown("""
        ### 1. üìà Survival Analysis
        #### üìä Kaplan-Meier Estimator
        - Estimates probability of remaining crisis-free over time
        - Non-parametric approach for time-to-event analysis
        - Accounts for censored data
        
        #### üìâ Cox Proportional Hazards
        - Analyzes impact of multiple variables on survival
        - Hazard ratios quantify risk factors
        - Time-dependent covariate analysis
        
        ### 2. ü§ñ Machine Learning Models
        #### üå≥ XGBoost Classification
        - Gradient boosting framework
        - Features:
            - üë§ Demographic factors
            - üè• Clinical indicators
            - üß† Psychosocial variables
            - üåç Environmental factors
        - Hyperparameter optimization
        - Cross-validation methodology
        
        ### 3. ‚öñÔ∏è Risk Scoring System
        - Weighted combination of:
            - üìã Clinical assessments
            - üìö Historical data
            - üîÑ Real-time indicators
            - üåç Environmental factors
        """)

        st.header("üìù Methodology")
        st.markdown("""
        ### üîÑ Data Processing Pipeline
        1. **üì• Data Collection**
           - üìù Standardized assessments
           - üë®‚Äç‚öïÔ∏è Clinical observations
           - ‚è±Ô∏è Temporal tracking
        
        2. **‚öôÔ∏è Feature Engineering**
           - üìä Temporal aggregation
           - üéØ Risk factor computation
           - üîÑ Interaction terms
        
        3. **ü§ñ Model Training**
           - ‚úîÔ∏è Cross-validation
           - ‚öôÔ∏è Hyperparameter optimization
           - üîÑ Model ensemble
        
        4. **üéØ Validation**
           - üë®‚Äç‚öïÔ∏è Clinical validation
           - üìä Statistical testing
           - üìà Performance metrics
        """)

    # Database Front Tab
    with tab3:
        st.title("üìä Database Overview")
        if not df.empty:
            # Public view of the database
            st.header("üìã Current Database Records")
            public_cols = [
                "Observation_Date", "Age", "Sex", "Employment_Status",
                "MH_Disorders", "Suicidal_Distress", "Time_To_Crisis",
                "Crisis_Event"
            ]
            st.dataframe(df[public_cols].sort_values("Observation_Date", ascending=False))
            
            # Basic statistics
            st.header("üìä Quick Statistics")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total Records", len(df))
                st.markdown("*Total entries in database*")
            with col2:
                st.metric("Average Age", f"{df['Age'].mean():.1f}")
                st.markdown("*Mean age of healthcare workers*")
            with col3:
                st.metric("Crisis Events", int(df['Crisis_Event'].sum()))
                st.markdown("*Total recorded crisis incidents*")

            # Data Quality Metrics
            st.header("üîç Data Quality Overview")
            missing_data = df[public_cols].isnull().sum()
            if missing_data.any():
                st.warning("Some records have missing data:")
                st.write(missing_data[missing_data > 0])
            else:
                st.success("All selected fields contain complete data")

            # Recent Updates
            st.header("üïí Recent Updates")
            recent = df.sort_values("Observation_Date", ascending=False).head(5)
            st.markdown("Last 5 entries added to the database:")
            st.dataframe(recent[public_cols])

        else:
            st.info("No data available. Please add entries using the Data Entry tab.")
            st.markdown("""
            ### Getting Started
            1. Navigate to the Data Entry tab
            2. Add individual records or upload a CSV file
            3. Return here to view the database overview
            """)

#Part 4

    # Detailed Analytics Tab
    with tab4:
        st.title("üìà Detailed Analytics")
        if not df.empty:
            # Risk Factor Analysis
            st.subheader("üéØ Risk Factor Analysis")
            risk_factors = [
                "Hopelessness", "Despair", "Impulsivity", "Social_Isolation",
                "Access_Lethal_Means", "Work_Stress_Level", "Burnout_Level"
            ]
            
            if all(col in df.columns for col in risk_factors):
                # Average Risk Scores
                st.markdown("### üìä Average Risk Factor Scores")
                risk_data = df[risk_factors].mean().sort_values(ascending=False)
                
                fig, ax = plt.subplots(figsize=(10, 6))
                risk_data.plot(kind='bar')
                plt.title("Average Risk Factor Scores")
                plt.xticks(rotation=45)
                st.pyplot(fig)
                
                # Correlation Matrix
                st.markdown("### üîÑ Risk Factor Correlations")
                st.markdown("""
                This heatmap shows how different risk factors relate to each other.
                Darker colors indicate stronger correlations.
                """)
                corr_matrix = df[risk_factors].corr()
                fig, ax = plt.subplots(figsize=(10, 8))
                plt.imshow(corr_matrix, cmap='coolwarm', aspect='auto')
                plt.colorbar()
                plt.xticks(range(len(risk_factors)), risk_factors, rotation=45)
                plt.yticks(range(len(risk_factors)), risk_factors)
                st.pyplot(fig)

            # Temporal Analysis
            st.subheader("üìÖ Temporal Analysis")
            if 'Observation_Date' in df.columns:
                # Time series of crisis events
                df['Month'] = pd.to_datetime(df['Observation_Date']).dt.to_period('M')
                monthly_crisis = df.groupby('Month')['Crisis_Event'].sum()
                
                st.markdown("### üìà Crisis Events Over Time")
                fig, ax = plt.subplots(figsize=(12, 6))
                monthly_crisis.plot(kind='line', marker='o')
                plt.title('Monthly Crisis Events')
                plt.xlabel('Month')
                plt.ylabel('Number of Crisis Events')
                plt.xticks(rotation=45)
                st.pyplot(fig)

            # Risk Factor Distribution
            st.subheader("üìä Risk Factor Distribution")
            selected_factor = st.selectbox(
                "Select Risk Factor to Analyze",
                risk_factors
            )
            
            if selected_factor in df.columns:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### üìä Distribution Analysis")
                    fig = px.histogram(
                        df, 
                        x=selected_factor,
                        nbins=20,
                        title=f"Distribution of {selected_factor}"
                    )
                    st.plotly_chart(fig)

                with col2:
                    st.markdown("### üì¶ Box Plot Analysis")
                    fig = px.box(
                        df,
                        x="Employment_Status",
                        y=selected_factor,
                        title=f"{selected_factor} by Employment Status"
                    )
                    st.plotly_chart(fig)

            # Advanced Analytics
            st.subheader("üî¨ Advanced Analytics")
            
            # Multivariate Analysis
            st.markdown("### üîÑ Multivariate Analysis")
            col1, col2 = st.columns(2)
            with col1:
                factor_x = st.selectbox("Select X-axis factor", risk_factors)
            with col2:
                factor_y = st.selectbox("Select Y-axis factor", 
                                      [f for f in risk_factors if f != factor_x])
            
            fig = px.scatter(
                df,
                x=factor_x,
                y=factor_y,
                color="Employment_Status",
                title=f"Relationship between {factor_x} and {factor_y}"
            )
            st.plotly_chart(fig)

            # Statistical Summary
            st.subheader("üìä Statistical Summary")
            summary_stats = df[risk_factors].describe()
            st.dataframe(summary_stats)

    # Data Entry Tab
    with tab5:
        st.title("üìù RESUME+ Data Entry")
        
        with st.form("data_entry_form"):
            # Demographic & Socioeconomic
            st.markdown("### üë§ Demographic & Socioeconomic")
            col1, col2 = st.columns(2)
            with col1:
                age = st.number_input("Age", 18, 100, 25)
                sex = st.selectbox("Sex", ["Male", "Female", "Other"])
                employment_status = st.selectbox("Employment Status", 
                    ["Full-time", "Part-time", "Contract", "Temporary"])
            with col2:
                income_level = st.selectbox("Income Level", ["Low", "Medium", "High"])
                social_deprivation = st.slider("Social Deprivation", 0, 10, 5)
                material_deprivation = st.slider("Material Deprivation", 0, 10, 5)

            # Occupation Details
            st.markdown("### üë©‚Äç‚öïÔ∏è Occupation Details")
            col1, col2 = st.columns(2)
            with col1:
                healthcare_role = st.selectbox("Healthcare Role", 
                    ["Doctor", "Nurse", "Admin Staff", "Paramedic", "Technician", 
                     "Therapist", "Pharmacist", "Midwife", "Healthcare Assistant"])
                department = st.selectbox("Department", 
                    ["Emergency", "Surgery", "Pediatrics", "Oncology", "Cardiology", 
                     "Neurology", "Psychiatry", "Radiology", "General Practice", 
                     "Intensive Care", "Obstetrics", "Geriatrics", "Administration"])
                years_experience = st.number_input("Years of Experience", 0, 50, 5)
                weekly_hours = st.number_input("Weekly Hours", 0, 100, 40)
                night_shifts = st.number_input("Night Shifts per Month", 0, 30, 0)
            with col2:
                work_stress = st.slider("Work Stress Level", 0, 10, 5)
                job_satisfaction = st.slider("Job Satisfaction", 0, 10, 5)
                burnout_level = st.slider("Burnout Level", 0, 10, 3)
                patient_facing = st.selectbox("Patient Facing Role", ["Yes", "No"])
                management_resp = st.selectbox("Management Responsibilities", ["Yes", "No"])

            # Clinical & Psychiatric
            st.markdown("### üè• Clinical & Psychiatric")
            col1, col2 = st.columns(2)
            with col1:
                mh_disorders = st.text_input("Mental Health Disorders")
                substance_use = st.text_input("Substance Use Disorders")
                suicidal_ideation = st.selectbox("History of Suicidal Ideation", ["No", "Yes"])
            with col2:
                freq_thoughts = st.slider("Frequency of Suicidal Thoughts", 0, 10, 0)
                intensity_thoughts = st.slider("Intensity of Suicidal Thoughts", 0, 10, 0)
                previous_attempts = st.number_input("Previous Suicide Attempts", 0, 10, 0)

            # Support & Resilience
            st.markdown("### ü§ù Support & Resilience")
            col1, col2 = st.columns(2)
            with col1:
                coping = st.slider("Coping Strategies", 0, 10, 5)
                resilience = st.slider("Measured Resilience", 0, 10, 5)
            with col2:
                mh_engagement = st.slider("MH Service Engagement", 0, 10, 5)
                support = st.slider("Supportive Relationships", 0, 10, 5)

            submitted = st.form_submit_button("Submit Data")
            if submitted:
                entry_data = {
                    "Age": age,
                    "Sex": sex,
                    "Employment_Status": employment_status,
                    "Income_Level": income_level,
                    "Social_Deprivation": social_deprivation,
                    "Material_Deprivation": material_deprivation,
                    "Healthcare_Role": healthcare_role,
                    "Department": department,
                    "Years_Experience": years_experience,
                    "Weekly_Hours": weekly_hours,
                    "Night_Shifts_Monthly": night_shifts,
                    "Work_Stress_Level": work_stress,
                    "Job_Satisfaction": job_satisfaction,
                    "Burnout_Level": burnout_level,
                    "Patient_Facing": patient_facing,
                    "Management_Responsibilities": management_resp,
                    "MH_Disorders": mh_disorders,
                    "Substance_Use_Disorders": substance_use,
                    "History_Suicidal_Ideation": 1 if suicidal_ideation == "Yes" else 0,
                    "Frequency_Suicidal_Thoughts": freq_thoughts,
                    "Intensity_Suicidal_Thoughts": intensity_thoughts,
                    "Previous_Suicide_Attempts": previous_attempts,
                    "Coping_Strategies": coping,
                    "Measured_Resilience": resilience,
                    "MH_Service_Engagement": mh_engagement,
                    "Supportive_Relationships": support,
                    "Observation_Date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                
                if insert_entry(entry_data):
                    st.success("‚úÖ Data successfully saved!")
                    st.rerun()


#PART 5

        # CSV Upload Section
        st.markdown("### üì§ Batch Data Upload")
        st.markdown("""
        Upload multiple records using a CSV file. 
        Ensure your CSV contains the same columns as the individual entry form.
        """)
        csv_file = st.file_uploader("Upload CSV file", type=["csv"])
        if csv_file is not None:
            try:
                uploaded_df = pd.read_csv(csv_file)
                st.markdown("### üìã Preview of CSV Data")
                st.dataframe(uploaded_df.head())
                
                if st.button("Process CSV"):
                    if upload_csv_to_db(uploaded_df):
                        st.success("‚úÖ CSV data successfully uploaded!")
                        st.rerun()
            except Exception as e:
                st.error(f"Error processing CSV: {e}")

    # Database Backend Tab
    with tab6:
        st.title("‚öôÔ∏è Database Management")
        
        if edit_mode:
            st.warning("""
            ‚ö†Ô∏è Admin Mode Active - Use with caution!
            Changes made here directly affect the database.
            """)
            
            # Database Operations
            st.header("üîß Database Operations")
            
            # Clear Database Option
            st.subheader("üóëÔ∏è Clear Database")
            st.markdown("""
            This will remove ALL records from the database.
            This action cannot be undone.
            """)
            if st.button("Clear Database"):
                confirm = st.checkbox("I understand this will delete all data")
                if confirm:
                    try:
                        with get_db_connection() as conn:
                            cursor = conn.cursor()
                            cursor.execute(f"DELETE FROM {TABLE_NAME}")
                            conn.commit()
                        st.success("Database cleared successfully!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"Error clearing database: {e}")
            
            # Recent Entries Management
            st.subheader("üìù Recent Entries Management")
            st.markdown("View and edit the most recent entries in the database.")
            recent_data = get_latest_entries(20)
            if not recent_data.empty:
                edited_df = st.data_editor(recent_data)
                if st.button("Save Changes"):
                    try:
                        with get_db_connection() as conn:
                            edited_df.to_sql(TABLE_NAME, conn, if_exists='replace', index=False)
                        st.success("Changes saved successfully!")
                    except Exception as e:
                        st.error(f"Error saving changes: {e}")

            # Database Statistics
            st.header("üìä Database Statistics")
            if not df.empty:
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Total Records", len(df))
                    st.metric("Unique Healthcare Roles", len(df['Healthcare_Role'].unique()))
                with col2:
                    st.metric("Data Points", len(df.columns) * len(df))
                    st.metric("Last Update", df['Observation_Date'].max())

                # Data Quality Check
                st.subheader("üîç Data Quality Check")
                missing_data = df.isnull().sum()
                if missing_data.any():
                    st.warning("Fields with missing data:")
                    st.write(missing_data[missing_data > 0])
                else:
                    st.success("No missing data found in the database")

        else:
            st.info("""
            üîí Enable Edit Mode in sidebar to access database management features.
            
            Available features in admin mode:
            - Clear database
            - Edit recent entries
            - View database statistics
            - Check data quality
            """)

        # Database Documentation
        st.header("üìö Database Documentation")
        st.markdown("""
        ### Table Structure
        The database contains the following main categories:
        - üë§ Demographic & Socioeconomic data
        - üë©‚Äç‚öïÔ∏è Occupation Details
        - üè• Clinical & Psychiatric information
        - üß† Psychological Factors
        - ü§ù Support & Resilience metrics
        
        ### Data Types
        - Text fields: For categorical data
        - Integer fields: For numerical scores and counts
        - DateTime fields: For temporal data
        
        ### Best Practices
        1. Always verify data before submission
        2. Use standardized formats for text entries
        3. Regular backups are recommended
        4. Monitor data quality metrics
        """)

# Entry point of the application
if __name__ == "__main__":
    main()


